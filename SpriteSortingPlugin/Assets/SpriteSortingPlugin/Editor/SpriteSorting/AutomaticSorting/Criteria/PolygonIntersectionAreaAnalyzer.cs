#region license

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
//  Unless required by applicable law or agreed to in writing,
//  software distributed under the License is distributed on an
//  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//  KIND, either express or implied.  See the License for the
//  specific language governing permissions and limitations
//   under the License.
//  -------------------------------------------------------------

//clipper license
/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 * http://www.boost.org/LICENSE_1_0.txt
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 * 
 */

#endregion

using System;
using System.Collections.Generic;
using ClipperLib;
using UnityEngine;

namespace SpriteSortingPlugin.SpriteSorting.AutomaticSorting.Criteria
{
    public class PolygonIntersectionAreaAnalyzer
    {
        private const float ScaleFactor = 100;
        private const float SquaredScaleFactor = ScaleFactor * ScaleFactor;

        private Clipper clipper;

        public double CalculateIntersectionArea(params Vector2[][] polygons)
        {
            if (polygons == null || polygons.Length <= 0)
            {
                return 0;
            }

            InitClipper();

            for (var i = 0; i < polygons.Length; i++)
            {
                var path = GenerateClipperPath(polygons[i]);
                clipper.AddPath(path, i == 0 ? PolyType.ptClip : PolyType.ptSubject, true);
            }

            var intersectingPolygons = new List<List<IntPoint>>();
            clipper.Execute(ClipType.ctIntersection, intersectingPolygons, PolyFillType.pftEvenOdd,
                PolyFillType.pftEvenOdd);

            var intersectionArea = 0d;
            foreach (var intersectingPolygon in intersectingPolygons)
            {
                intersectionArea += Math.Abs(Clipper.Area(intersectingPolygon));
            }

            intersectionArea /= SquaredScaleFactor;

            return intersectionArea;
        }

        private List<IntPoint> GenerateClipperPath(IReadOnlyCollection<Vector2> points)
        {
            var path = new List<IntPoint>(points.Count);
            foreach (var point in points)
            {
                var scaledPoint = new IntPoint(Math.Round(point.x * ScaleFactor), Math.Round(point.y * ScaleFactor));
                path.Add(scaledPoint);
            }

            return path;
        }

        private void InitClipper()
        {
            if (clipper == null)
            {
                clipper = new Clipper();
            }
            else
            {
                clipper.Clear();
            }
        }
    }
}